package main;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JComponent;

@SuppressWarnings("serial")
public class JGameBoard extends JComponent implements MouseListener{
private JCell[][] m_lifeArray;
private int m_rows; 
private int m_columns;
JGameBoard() 
{
m_rows = 10;
m_columns = 10; 
m_lifeArray = new JCell[m_rows][m_columns];
for(int x =0; x < m_rows; x++)
	for(int y = 0 ; y < m_columns; y++)
		m_lifeArray[x][y] = new JCell();
addMouseListener(this);
}
public void paint(Graphics g)
{

//Drawing the Grid
g.drawRect(0,0,50*m_rows,50*m_columns);
for(int y = 1; y <= m_rows; y++)
	g.drawLine(0,50*y,50*m_rows,50*y);
for(int x = 1; x <= m_rows; x++)
	g.drawLine(50*x,0,50*x,50*m_columns);
g.setColor(Color.YELLOW);
//Filling the Squares
// TODO: Finish filling
for(int x =0; x < m_rows; x++)
	for(int y = 0 ; y < m_columns; y++)
	{
	if(m_lifeArray[x][y].isAlive())
	{
	g.fillRect(50*x,50*y,49,49);
	}
	else
	{
	g.clearRect(50*x,50*y,49,49);
	}
	}


}
@Override
public void mouseClicked(MouseEvent arg0) {
	System.out.println(Integer.toString(arg0.getX())+' ' +Integer.toString(arg0.getY()));
	m_lifeArray[arg0.getX()/50][arg0.getY()/50].SetCurrentState(!m_lifeArray[arg0.getX()/50][arg0.getY()/50].isAlive());
	repaint();
}
@Override
public void mouseEntered(MouseEvent arg0) {
	
	
}
@Override
public void mouseExited(MouseEvent arg0) {
	
	
}
@Override
public void mousePressed(MouseEvent arg0) {
	
	
}
@Override
public void mouseReleased(MouseEvent arg0) {

	
}

public void Iterate()
{
/*
  Any live cell with fewer than two live neighbours dies, as if caused by under-population.
  Any live cell with two or three live neighbours lives on to the next generation.
  Any live cell with more than three live neighbours dies, as if by overcrowding.
  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction 
*/
	
for(int x =0; x < m_rows; x++)
	for(int y = 0 ; y < m_columns; y++)
	{
	 int NumberofAliveNeighbors = 0;
	  if(x != m_rows-1)
	  {
	  if(m_lifeArray[x+1][y].isAlive()) NumberofAliveNeighbors++;
	  if(y != 0)
      if(m_lifeArray[x+1][y-1].isAlive()) NumberofAliveNeighbors++;
      if(y != m_columns-1)
      if(m_lifeArray[x+1][y+1].isAlive()) NumberofAliveNeighbors++;
	  }
      if(x != 0)
      {
      if(m_lifeArray[x-1][y].isAlive()) NumberofAliveNeighbors++;
      if(y != 0)
       if(m_lifeArray[x-1][y-1].isAlive()) NumberofAliveNeighbors++;
      if(y != m_columns-1)
       if(m_lifeArray[x-1][y+1].isAlive()) NumberofAliveNeighbors++;	
      }
	  
      if(y != 0)
       if(m_lifeArray[x][y-1].isAlive()) NumberofAliveNeighbors++;
      if(y != m_columns-1)
       if(m_lifeArray[x][y+1].isAlive()) NumberofAliveNeighbors++;
	  
      
      
     if(m_lifeArray[x][y].isAlive())
     {
    	if(NumberofAliveNeighbors < 2 || NumberofAliveNeighbors >3)
    		m_lifeArray[x][y].SetNextState(false);
    	else
    		m_lifeArray[x][y].SetNextState(true);
    	
     }
     else
     {
    	if(NumberofAliveNeighbors ==3)
    		m_lifeArray[x][y].SetNextState(true);
    	else
    		m_lifeArray[x][y].SetNextState(false);
     }
    	
	}
	
	
	
repaint();	
	
}

}
